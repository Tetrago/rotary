"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[297],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(n),u=o,f=s["".concat(m,".").concat(u)]||s[u]||p[u]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[s]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7882:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:8},i="Commands",l={unversionedId:"libs/vtk/commands",id:"libs/vtk/commands",title:"Commands",description:"Command Pool",source:"@site/docs/libs/vtk/commands.md",sourceDirName:"libs/vtk",slug:"/libs/vtk/commands",permalink:"/rotary/libs/vtk/commands",draft:!1,editUrl:"https://github.com/tetrago/rotary/tree/develop/docs/docs/libs/vtk/commands.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Framebuffer",permalink:"/rotary/libs/vtk/framebuffer"},next:{title:"Extras",permalink:"/rotary/libs/vtk/extras"}},m={},c=[{value:"Command Pool",id:"command-pool",level:2},{value:"Command Buffer",id:"command-buffer",level:2}],d={toc:c},s="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"commands"},"Commands"),(0,o.kt)("h2",{id:"command-pool"},"Command Pool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"uint32_t index = logicalDevice->queueIndex(vtk::QueueType::Graphics);\n\n// ...\n\nvtk::Ref<vtk::CommandPool> commandPool = vtk::CommandPoolBuilder(logicalDevice)\n    .index(index)\n    .builder();\n")),(0,o.kt)("h2",{id:"command-buffer"},"Command Buffer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"VkCommandBuffer buffer = commandPool->create();\nstd::vector<VkCommandBuffer> buffers = commandPool->create(3);\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"VkCommandBuffer"),"s do not need to be manually destroyed; however, they only exist for as long as the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"VkCommandPool"),", i.e. the origin ",(0,o.kt)("inlineCode",{parentName:"p"},"vtk::CommandPool")," object.\n",(0,o.kt)("inlineCode",{parentName:"p"},"VkCommandBuffer"),"s are raw Vulkan handles, so they do not store a reference to the ",(0,o.kt)("inlineCode",{parentName:"p"},"VkCommandPool")," on their own.")))}p.isMDXComponent=!0}}]);