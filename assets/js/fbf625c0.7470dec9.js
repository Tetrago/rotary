"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[760],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),g=s,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||i;return t?n.createElement(m,a(a({ref:r},p),{},{components:t})):n.createElement(m,a({ref:r},p))}));function m(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var i=t.length,a=new Array(i);a[0]=g;var o={};for(var l in r)hasOwnProperty.call(r,l)&&(o[l]=r[l]);o.originalType=e,o[u]="string"==typeof e?e:s,a[1]=o;for(var c=2;c<i;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3369:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=t(7462),s=(t(7294),t(3905));const i={sidebar_position:3},a="Shader Cross-Compiler",o={unversionedId:"libs/shcc",id:"libs/shcc",title:"Shader Cross-Compiler",description:"Purpose",source:"@site/docs/libs/shcc.md",sourceDirName:"libs",slug:"/libs/shcc",permalink:"/rotary/libs/shcc",draft:!1,editUrl:"https://github.com/tetrago/rotary/tree/develop/docs/docs/libs/shcc.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Extras",permalink:"/rotary/libs/vtk/extras"},next:{title:"Extras",permalink:"/rotary/extras/"}},l={},c=[{value:"Purpose",id:"purpose",level:2},{value:"Pipeline",id:"pipeline",level:3}],p={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,s.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"shader-cross-compiler"},"Shader Cross-Compiler"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <shcc/shcc.hpp>\n")),(0,s.kt)("h2",{id:"purpose"},"Purpose"),(0,s.kt)("p",null,"The Shader Cross-Compilater library is resposible for handling the loading, compiling, translating, and analysis of shaders.\nBecause the Rotary aims to support multiple graphics APIs, multiple shader formats will be needed as well."),(0,s.kt)("h3",{id:"pipeline"},"Pipeline"),(0,s.kt)("mermaid",{value:'flowchart TD\n    subgraph "Resource"\n        hlsl[(HLSL)]\n    end\n\n    glsl([GLSL])\n    spirv([SPIR-V])\n    dxil([DXIL])\n    reflect([Reflection])\n\n    spirv_cross{{SPIR-V Cross}}\n    glslang{{Glslang}}\n    dxc{{DirectX Shader Compiler}}\n\n    subgraph "Graphics API"\n        opengl[/OpenGL/]\n        vulkan[/Vulkan/]\n        directx[/DirectX/]\n    end\n\n    hlsl --- glslang & dxc\n    glsl --- opengl\n    spirv --- vulkan & spirv_cross\n    spirv -.- opengl\n    dxil --- directx\n\n    spirv_cross --- glsl & reflect\n    glslang --- spirv\n    dxc --- dxil\n\n    click glslang "https://github.com/KhronosGroup/glslang" _blank\n    click spirv_cross "https://github.com/KhronosGroup/SPIRV-Cross" _blank\n    click dxc "https://github.com/microsoft/DirectXShaderCompiler" _blank\n\n    style glsl fill:#f96\n    style dxil fill:#f96\n    style opengl fill:#f96\n    style dxc fill:#f96\n    style directx fill:#f96'}),(0,s.kt)("h1",{id:"usage"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void callback(const std::string& message);\nstd::string source; // HLSL source\n\n// ...\n\nstd::shared_ptr<shcc::Runtime> runtime = shcc::runtime(callback);\n\nshcc::Package package = runtime->package(source, { shcc::Stage::Vertex, shcc::Stage::Fragment });\n\nstd::vector<uint8_t> vertexSpvBinary = package.compile(shcc::Stage:Vertex, shcc::Language::Spirv);\nstd::span<uint32_t> binary(reinterpret_cast<const uint32_t*>(vertexSpvBinary.data()), vertexSpvBinary.size() / 4);\n\nshcc::Resources resoucres = package.resources(); // Reflection information\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Although shader ",(0,s.kt)("inlineCode",{parentName:"p"},"shcc::Package"),"s do depend on their corresponding ",(0,s.kt)("inlineCode",{parentName:"p"},"shcc::Runtime")," to function, they hold a ",(0,s.kt)("inlineCode",{parentName:"p"},"std::shared_ptr<shcc::Runtime>"),"\ninternally, preventing it from being destructed beforehand.")))}d.isMDXComponent=!0}}]);